import numpy as np
import magpylib as magpy
from scipy.spatial.transform import Rotation as R
import math

Durchmesser = 1
Höhe = 2

# Create magnet
magnet = magpy.magnet.Cylinder(
    polarization=(1, 0, 0),
    dimension=(Durchmesser, Höhe),
    position=(0, 0, 1),
    style_label="Magnet",
    style_color=".7",
)

# Array mit Rotationswinkeln für die X- und Y-Achse
rotation_angles_magnet = 30  # Rotation des Magneten, [X-Achse, Y-Achse] in Grad

# Erstelle Rotation um X und Y Achse
rotation_axis_magnet = R.from_euler('x', rotation_angles_magnet, degrees=True)  # Rotation um die X-Achse
# Wenden wir die kombinierte Rotation auf die Orientierung des Magneten an


# Versatz ermitteln und nue Positionieren
xy_offset_magnet_tilted = np.sin(np.radians(rotation_angles_magnet)) * Höhe/2
z_offset_magnet_tilted = (np.tan(np.radians(rotation_angles_magnet))*xy_offset_magnet_tilted)
print(xy_offset_magnet_tilted, z_offset_magnet_tilted)
magnet.position = magnet.position - [0,xy_offset_magnet_tilted,0] #Ergänzen des Offsets der durch das Kippen entsteht
magnet.orientation = rotation_axis_magnet

# Definiere die Winkel für die Magnetbewegung (für symmetrische Rotation)
angles = np.linspace(0, 360, 72)

# Magnet um seine eigene, geneigte Achse rotieren lassen
magnet.rotate_from_angax(angles, rotation_axis_magnet.apply([0, 0, 1]), None, "auto", degrees=True)

# Show scene
magpy.show(magnet, animation=True, backend="plotly")


### Magnet
# Achsversatz xy Allgemein bekannt als Versatz
# Wobble        Versatz des magneten ohne Änderung der Rotationsachse
# Kippung       Kippung entlang der X- und oder Y-Achse in Grad durch das Magnetzentrum
